/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ctgu.examsystem.rest;

import com.ctgu.examsystem.rest.dto.CreateExamResultRequest;
import com.ctgu.examsystem.rest.dto.ExamResultDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-21T15:25:47.724+08:00[Asia/Shanghai]")

@Validated
@Api(value = "examResult", description = "the examResult API")
public interface ExamResultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "创建考试结果", nickname = "createExamResultInfo", notes = "", response = ExamResultDto.class, tags={ "examResult", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ExamResultDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/examResult/{studentRef}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ExamResultDto> createExamResultInfo(@ApiParam(value = "学生Id",required=true) @PathVariable("studentRef") Long studentRef,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateExamResultRequest createExamResultRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"score\" : 6.02745618307040320615897144307382404804229736328125,  \"answers\" : \"answers\",  \"startTime\" : \"startTime\",  \"id\" : 0,  \"endTime\" : \"endTime\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "删除指定考试结果", nickname = "deleteExamResult", notes = "", tags={ "examResult", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/examResult/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteExamResult(@ApiParam(value = "考试结果id",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "获取该用户的所有考试结果信息", nickname = "examResultStudentRefGet", notes = "", response = ExamResultDto.class, responseContainer = "List", tags={ "examResult", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ExamResultDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/examResult/{studentRef}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ExamResultDto>> examResultStudentRefGet(@ApiParam(value = "学生Id",required=true) @PathVariable("studentRef") Long studentRef) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"score\" : 6.02745618307040320615897144307382404804229736328125,  \"answers\" : \"answers\",  \"startTime\" : \"startTime\",  \"id\" : 0,  \"endTime\" : \"endTime\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "获取指定考试结果详情", nickname = "getExamResultInfo", notes = "", response = ExamResultDto.class, tags={ "examResult", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ExamResultDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/examResult/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ExamResultDto> getExamResultInfo(@ApiParam(value = "考试Id",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"score\" : 6.02745618307040320615897144307382404804229736328125,  \"answers\" : \"answers\",  \"startTime\" : \"startTime\",  \"id\" : 0,  \"endTime\" : \"endTime\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "更新考试结果信息", nickname = "updateExamResult", notes = "", response = ExamResultDto.class, tags={ "examResult", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ExamResultDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/examResult/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ExamResultDto> updateExamResult(@ApiParam(value = "考试结果Id",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateExamResultRequest createExamResultRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"score\" : 6.02745618307040320615897144307382404804229736328125,  \"answers\" : \"answers\",  \"startTime\" : \"startTime\",  \"id\" : 0,  \"endTime\" : \"endTime\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
