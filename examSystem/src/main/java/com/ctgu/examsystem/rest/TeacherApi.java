/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ctgu.examsystem.rest;

import com.ctgu.examsystem.rest.dto.CreateTeacherRequest;
import com.ctgu.examsystem.rest.dto.TeacherDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-21T15:25:48.742+08:00[Asia/Shanghai]")

@Validated
@Api(value = "teacher", description = "the teacher API")
public interface TeacherApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "创建老师", nickname = "createTeacherInfo", notes = "", response = TeacherDto.class, tags={ "teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = TeacherDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/teacher",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<TeacherDto> createTeacherInfo(@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateTeacherRequest createTeacherRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"realName\" : \"realName\",  \"teacherName\" : \"teacherName\",  \"teacherTel\" : \"teacherTel\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "删除指定老师", nickname = "deleteTeacher", notes = "", tags={ "teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/teacher/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteTeacher(@ApiParam(value = "老师id",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "获取指定老师详情", nickname = "getTeacherInfo", notes = "", response = TeacherDto.class, tags={ "teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = TeacherDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/teacher/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TeacherDto> getTeacherInfo(@ApiParam(value = "老师id",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"realName\" : \"realName\",  \"teacherName\" : \"teacherName\",  \"teacherTel\" : \"teacherTel\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "获取老师列表", nickname = "getTeacherList", notes = "", response = TeacherDto.class, responseContainer = "List", tags={ "teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = TeacherDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/teacher",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<TeacherDto>> getTeacherList() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"realName\" : \"realName\",  \"teacherName\" : \"teacherName\",  \"teacherTel\" : \"teacherTel\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "更新老师信息", nickname = "updateTeacher", notes = "", response = TeacherDto.class, tags={ "teacher", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = TeacherDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/teacher/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<TeacherDto> updateTeacher(@ApiParam(value = "老师Id",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateTeacherRequest createTeacherRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"realName\" : \"realName\",  \"teacherName\" : \"teacherName\",  \"teacherTel\" : \"teacherTel\",  \"id\" : 0}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
