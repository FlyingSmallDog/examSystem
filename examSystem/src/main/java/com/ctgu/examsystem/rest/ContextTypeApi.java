/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ctgu.examsystem.rest;

import com.ctgu.examsystem.rest.dto.ContextTypeDto;
import com.ctgu.examsystem.rest.dto.CreateContextTypeRequest;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-21T15:25:48.246+08:00[Asia/Shanghai]")

@Validated
@Api(value = "ContextType", description = "the ContextType API")
public interface ContextTypeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "添加题目类型", nickname = "createContextType", notes = "", response = ContextTypeDto.class, tags={ "contextType", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ContextTypeDto.class),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/ContextType/{teacherRef}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ContextTypeDto> createContextType(@ApiParam(value = "老师id",required=true) @PathVariable("teacherRef") Long teacherRef,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CreateContextTypeRequest createContextTypeRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0,  \"contextDescribe\" : \"contextDescribe\",  \"teacherRef\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "删除题目内容类型", nickname = "delContextType", notes = "", tags={ "contextType", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/ContextType/{teacherRef}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> delContextType(@ApiParam(value = "老师id",required=true) @PathVariable("teacherRef") Long teacherRef,@NotNull @ApiParam(value = "主键", required = true) @Valid @RequestParam(value = "id", required = true) Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "获取题目类型", nickname = "getContextType", notes = "", response = ContextTypeDto.class, responseContainer = "List", tags={ "contextType", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "操作成功", response = ContextTypeDto.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "服务未找到", response = String.class) })
    @RequestMapping(value = "/ContextType/{teacherRef}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ContextTypeDto>> getContextType(@ApiParam(value = "老师id",required=true) @PathVariable("teacherRef") Long teacherRef) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : 0,  \"contextDescribe\" : \"contextDescribe\",  \"teacherRef\" : 6}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
